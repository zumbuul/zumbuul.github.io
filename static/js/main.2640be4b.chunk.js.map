{"version":3,"sources":["components/Start.js","components/Navbar.js","components/Individual.js","components/imgs/sort.gif","App.jsx","Sort.js","Routes.js","index.js"],"names":["Start","props","href","className","class","Navbar","onClick","document","documentElement","scrollTop","Individual","imgClass","src","img","header","text","App","Sort","useState","elements","setElements","array","elArray","getElementById","speedSlider","generateElements","input","i","oldElements","Math","floor","random","innerSort","inputElement","mainElement","comparingElement","setTimeout","style","backgroundColor","value","sort","setInterval","clearInterval","b","switchArrayElements","useEffect","console","log","type","min","max","id","onChange","map","el","idx","height","Routes","exact","path","component","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2640be4b.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Start = (props) => {\r\n  return (\r\n    <a href=\"/sort\">\r\n      <button className={props.class}>Start</button>\r\n    </a>\r\n  );\r\n};\r\n\r\nexport default Start;\r\n","import React from \"react\";\r\nimport Start from \"./Start\";\r\nconst Navbar = () => {\r\n  const scroll = () => {\r\n    document.documentElement.scrollTop = 600;\r\n  };\r\n\r\n  return (\r\n    <div className=\"navbar\">\r\n      <div className=\"navbar-container\">\r\n        <Start class={\"start-button\"} />\r\n        <button onClick={scroll} className=\"read-button\">\r\n          Sta je sortiranje?\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport photo from \"./imgs/sort.gif\";\r\nconst Individual = (props) => {\r\n  return (\r\n    <div className=\"individual-main\">\r\n      <a href={props.href}>\r\n        <img className={props.imgClass} src={props.img}></img>\r\n      </a>\r\n      <div className=\"individual-text\">\r\n        <h3 className=\"individual-text-header\">{props.header}</h3>\r\n        <p className=\"individual-text-para\">{props.text}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Individual;\r\n","export default __webpack_public_path__ + \"static/media/sort.8a40658a.gif\";","import react from \"react\";\nimport Navbar from \"./components/Navbar\";\nimport Start from \"./components/Start\";\nimport Individual from \"./components/Individual\";\n\nfunction App() {\n  const text = [\n    \"Algoritam za sortiranje je algoritam koji se koristi za sortiranje clanova niza u odredjenom redosledu. Za efikasan algoritam bitno je da se iskoristi struktura podataka koja dopusta nasumicni pristup memoriji. Efikasnost samog algoritma ocenjuje se na osnovu performanse na testovima koji ocenjuju koliko memorije algoritam zauzima i koliko vremena je algoritmu potrebno da procesuje niz. Ta dva testa zovu se Veliko O Slozenost Prostora i Veliko O Slozenost Vremena. (Big O space & time complexity)\",\n    \"Slozenost vremena izvrsavanja algoritma predstavlja potrebno vreme za resavanje jedne istance problema. Ovo vreme se izrazava pomocu notacije velikog O i zavisi od broja unosnih vrednosti gde << n >> predstavlja broj vrednosti kao i same slozensti algoritma.\",\n    \"Slozenost prostora algoritma predstavlja potrebnu memoriju za resavanje jedne instance problema. Kao i kod vremena, slozenost prostora se izrazava pomocu notacije velikog O i zavisi od broja unosnih vrednosti kao i same slozenosti algoritma.\",\n  ];\n  const header = [\n    \"Sta je algoritam za sortiranje?\",\n    \"Big O Time Complexity\",\n    \"Big O Space Complexity\",\n  ];\n  const img = [\"./imgs/sort.gif\", \"./imgs/time.jpg\", \"./imgs/ram.jpg\"];\n\n  return (\n    <div>\n      <Navbar />{\" \"}\n      <div className=\"about\">\n        <div className=\"about-container\">\n          <h1>Vizualizacija Algoritma za Sortiranje</h1>\n          <h2>Graficki prikaz najpopularnijih algoritama za sortiranje</h2>\n          <Start class={\"about-start-button\"} />\n        </div>\n      </div>\n      <div className=\"main\">\n        <div className=\"main-content\">\n          <Individual\n            href={\"https://en.wikipedia.org/wiki/Sorting_algorithm\"}\n            text={text[0]}\n            header={header[0]}\n            img={img[0]}\n          />\n          <Individual\n            href={\"https://en.wikipedia.org/wiki/Time_complexity\"}\n            text={text[1]}\n            header={header[1]}\n            img={img[1]}\n            imgClass={\"rightfloat\"}\n          />\n          <Individual\n            href={\"https://en.wikipedia.org/wiki/Space_complexity\"}\n            text={text[2]}\n            header={header[2]}\n            img={img[2]}\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\r\nimport { useEffect, useState } from \"react\";\r\nconst Sort = () => {\r\n  const [elements, setElements] = useState([]);\r\n  let array = [];\r\n\r\n  const elArray = document.getElementById(\"slider\");\r\n  const speedSlider = document.getElementById(\"speed\");\r\n\r\n  const genRandomNum = () => {\r\n    return Math.floor(Math.random() * 500) + 20;\r\n  };\r\n\r\n  const generateElements = (input) => {\r\n    for (let i = 0; i < input; i++) {\r\n      setElements((oldElements) => [...oldElements, genRandomNum()]);\r\n    }\r\n  };\r\n\r\n  //Pri pritisku dugmeta zovemo startSort funkcicomparingElementu kocomparingElementa arrayu\r\n  //za mencomparingElementacomparingElemente pridacomparingElemente startni array u useState, ta funkcicomparingElementa pozove\r\n  //funkcicomparingElementu innerSort kocomparingElementa prodcomparingElemente kroz ostatak niza uporedi sa el.\r\n  //kocomparingElementi comparingElemente passovan od strane startSort-mainElement\r\n  //innerSort uporedi el. iz startSorta sa ostatkom niza\r\n\r\n  const switchArrayElements = (mainElement, b) => {\r\n    document.getElementById(mainElement).style.backgroundColor = \"red\";\r\n    //color the element that is about to switch to red (the one that we found)\r\n    setTimeout(() => {\r\n      [array[mainElement], array[b]] = [array[b], array[mainElement]];\r\n      setElements([...array]);\r\n      document.getElementById(mainElement).style.backgroundColor = \"#61dafb\";\r\n      //color the red element back to its original color\r\n    }, 40);\r\n  };\r\n\r\n  const innerSort = (inputElement) => {\r\n    let mainElement = inputElement;\r\n    let comparingElement = mainElement + 1;\r\n    //set the sorting numbers\r\n    setTimeout(() => {\r\n      document.getElementById(inputElement).style.backgroundColor = \"#beff00\";\r\n    }, speedSlider.value * elArray.value + 100);\r\n    //styling after every iteration\r\n    if (comparingElement > elArray.value - 1) return;\r\n    //check if the main comparing element is the last one\r\n    const sort = setInterval(function () {\r\n      if (comparingElement == elArray.value) {\r\n        document.getElementById(elArray.value - 1).style.backgroundColor =\r\n          \"#247bff\";\r\n        clearInterval(sort);\r\n        //stop comparing if its the last element\r\n        if (inputElement != mainElement)\r\n          switchArrayElements(mainElement, inputElement);\r\n        return;\r\n      }\r\n      if (array[mainElement] > array[comparingElement]) {\r\n        mainElement = comparingElement;\r\n      }\r\n      //selection sort check\r\n      document.getElementById(comparingElement++).style.backgroundColor =\r\n        \"#247bff\";\r\n      //color the \"scanning\" line\r\n      document.getElementById(inputElement).style.backgroundColor = \"#95c700\";\r\n      //color the current main comparing element\r\n      setTimeout(function () {\r\n        document.getElementById(comparingElement - 1).style.backgroundColor =\r\n          \"#61DAFB\";\r\n        //undo the coloring made by the \"scanning line\"\r\n        document.getElementById(elArray.value - 1).style.backgroundColor =\r\n          \"#61DAFB\";\r\n        //fixes the bug that doesnt color the last element\r\n      }, speedSlider.value - 3); //timer for the \"after-check\" coloring - has to be lower than the counter below\r\n    }, speedSlider.value);\r\n    //do 1 \"lesser\" comparison in x ms\r\n  };\r\n  const startSort = () => {\r\n    array = [...elements];\r\n    for (let i = 0; i <= elArray.value - 1; i++) {\r\n      setTimeout(() => {\r\n        innerSort(i);\r\n      }, speedSlider.value * elArray.value * 1.15 * i);\r\n    }\r\n  };\r\n\r\n  // \"schedules\" the comparison of the entire array - every \"big\" comparison is exactly x\r\n  // ms inbetween and every other \"lesser\" comparison needs to take less time than the big one\r\n\r\n  useEffect(() => {\r\n    generateElements(50);\r\n    console.log(document.getElementById(\"slider\").value);\r\n  }, []);\r\n\r\n  const setElSize = () => {\r\n    console.log(document.getElementById(\"slider\").value);\r\n    setElements([]);\r\n    generateElements(document.getElementById(\"slider\").value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"mainElement\">\r\n      <div className=\"btn-container\">\r\n        <button className=\"sort-btn\" onClick={startSort}>\r\n          SORT\r\n        </button>\r\n\r\n        <input\r\n          type=\"range\"\r\n          min=\"10\"\r\n          max=\"60\"\r\n          id=\"slider\"\r\n          onChange={setElSize}\r\n        ></input>\r\n\r\n        <input type=\"range\" min=\"7\" max=\"20\" id=\"speed\"></input>\r\n      </div>\r\n      <div className=\"el-container\">\r\n        {elements.map((el, idx) => {\r\n          return (\r\n            <div\r\n              id={idx}\r\n              className=\"algo-div\"\r\n              style={{ height: `${el}px` }}\r\n            ></div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Sort;\r\n","import React from \"react\";\r\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\nimport App from \"./App.jsx\";\r\nimport Sort from \"./Sort\";\r\nconst Routes = () => {\r\n  return (\r\n    <BrowserRouter>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={App} />\r\n        <Route exact path=\"/sort\" component={Sort} />\r\n      </Switch>\r\n    </BrowserRouter>\r\n  );\r\n};\r\n\r\nexport default Routes;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Routes from \"./Routes\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Routes />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}